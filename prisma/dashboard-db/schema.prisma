generator client {
  provider = "prisma-client-js"
  output   = "../../src/generated/dashboard-db"
}

datasource db {
  provider = "postgresql"
  url      = env("DASHBOARD_DATABASE_URL")
}

// PO Notes Model
model PONote {
  noteId    Int       @id @unique @default(autoincrement())
  type      Type
  status    Status    @default(PENDING)
  note      String    @db.VarChar(1500)
  createdAt DateTime  @default(now())
  dueDate   DateTime?
  issueLink String?
  isDeleted Boolean   @default(false)
  projectId Int
  memberId  Int
}

// ** DSM Feature **

// SentimentMeter Model
model SentimentMeter {
  sentiment   Sentiment
  createdAt   DateTime  @default(now())
  sentimentId Int       @id @unique @default(autoincrement())
  projectId   Int
  memberId    Int 
}

// CelebrationReactedUser Model
model CelebrationReactedUser {
  memberId      Int
  celebrationId Int
  isRemoved  Boolean   @default(false)
  reactionId    Int         @id @unique @default(autoincrement())
  celebration       Celebration @relation(fields: [celebrationId], references: [celebrationId], onDelete: Cascade)
  
  @@unique([memberId, celebrationId])
}

// Celebration Model
model Celebration {
  author        String
  content       String                   @db.VarChar(300)
  createdAt     DateTime                 @default(now())
  type          CelebrationType
  celebrationId Int                      @id @unique @default(autoincrement())
  isAnonymous   Boolean                  @default(false)
  projectId     Int
  memberId      Int
  reaction      CelebrationReactedUser[]
}

// RequestTaggedUser Model
model RequestTaggedUser {
  // userId    String
  memberId  Int
  requestId Int
  tagId     Int     @id @unique @default(autoincrement())
  request   Request @relation(fields: [requestId], references: [requestId], onDelete: Cascade)
}

// Request Model
model Request {
  memberId          Int
  author            String
  content           String              @db.VarChar(255)
  status            RequestStatus       @default(PENDING)
  type              RequestType
  createdAt         DateTime            @default(now())
  requestId         Int                 @id @unique @default(autoincrement())
  projectId         Int
  isFlagged         Boolean             @default(false)
  taggedIndividuals RequestTaggedUser[]
}

// Announcement Model
model Announcement {
  announcementId Int      @id @unique @default(autoincrement())
  title          String   @db.VarChar(255)
  author         String
  content        String   @db.VarChar(2000)
  createdAt      DateTime @default(now())
  projectId      Int
  memberId       Int
}

// Made to stick model
model MadeToStick {
  i String @id @unique @default(uuid())
  value String
  backgroundColor String @db.VarChar(255)
  x Int
  y Int
  w Int
  h Int
  type MadeToStickType // Enum - MadeToStick
  emailId String
  projectId Int
  memberId  Int
}

// Leave Model
model Leave {
  leaveId Int @id @unique @default(autoincrement())
  userFullName String
  startDate DateTime
  endDate DateTime
  event String @db.VarChar(255)
  isRisk Boolean
  projectId Int
  memberId  Int
}
model teamInformation {
  id Int @id @unique @default(autoincrement())
  memberId Int 
  bio String?
  projectRole String?
  projectId Int
  startDate DateTime?
  endDate DateTime?
  @@unique([memberId, projectId])
}
model notification {
  id Int @id @unique @default(autoincrement())
  title String
  content String?
  projectId Int
  createdAt DateTime @default(now())
  targetType NotificationType?
  targetId Int?
  userNotifications userNotification[]
}
model userNotification {
  id Int @id @unique @default(autoincrement())
  memberId Int
  readStatus Boolean @default(false)
  notificationId Int
  notifications notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  @@unique([memberId, notificationId])
}
// Enums

enum MadeToStickType {
  IMAGE
  TEXT
}

enum Status {
  COMPLETED
  PENDING
  NONE
  DRAFT
}

enum Type {
  ACTION_ITEM
  KEY_DECISION
  AGENDA_ITEM
}

enum Sentiment {
  NULL
  HAPPY
  GOOD
  OK
  BAD
}

enum RequestStatus {
  PENDING
  APPROVED
}

enum RequestType {
  RESOURCE
  MEETING
}

enum CelebrationType {
  CELEBRATION
  IMPEDIMENT
}

enum NotificationType {
    TEAM_REQUEST
    CELEBRATION
    ANNOUNCEMENT
}

