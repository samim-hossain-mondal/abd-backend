generator client {
  provider = "prisma-client-js"
  output   = "../../src/generated/dashboard"
}

datasource db {
  provider = "postgresql"
  url      = env("DASHBOARD_DATABASE_URL")
}

model PONote {
  noteId    Int       @id @unique @default(autoincrement())
  type      Type
  status    Status    @default(PENDING)
  note      String    @db.VarChar(1500)
  createdAt DateTime  @default(now())
  dueDate   DateTime?
  issueLink String?
  isDeleted Boolean   @default(false)
  projectId Int
  memberId  Int
}

model SentimentMeter {
  author      String
  sentiment   Sentiment
  createdAt   DateTime  @default(now())
  sentimentId Int       @id @unique @default(autoincrement())
  projectId   Int
  memberId    Int 
}

model CelebrationReactedUser {
  // userId        String
  memberId      Int
  celebrationId Int
  reactionId    Int         @id @unique @default(autoincrement())
  request       Celebration @relation(fields: [celebrationId], references: [celebrationId])

  // @@unique([userId, celebrationId])
  @@unique([memberId, celebrationId])
}

model Celebration {
  author        String
  content       String                   @db.VarChar(300)
  createdAt     DateTime                 @default(now())
  type          CelebrationType
  celebrationId Int                      @id @unique @default(autoincrement())
  isAnonymous   Boolean                  @default(false)
  projectId     Int
  memberId      Int
  reaction      CelebrationReactedUser[]
}

model RequestTaggedUser {
  // userId    String
  memberId  Int
  requestId Int
  tagId     Int     @id @unique @default(autoincrement())
  request   Request @relation(fields: [requestId], references: [requestId])
}

model Request {
  memberId          Int
  author            String
  content           String              @db.VarChar(255)
  status            RequestStatus       @default(PENDING)
  type              RequestType
  createdAt         DateTime            @default(now())
  requestId         Int                 @id @unique @default(autoincrement())
  projectId         Int
  taggedIndividuals RequestTaggedUser[]
}

model Announcement {
  announcementId Int      @id @unique @default(autoincrement())
  author         String
  content        String   @db.VarChar(255)
  createdAt      DateTime @default(now())
  projectId      Int
  memberId       Int
}


enum Status {
  COMPLETED
  PENDING
  NONE
  DRAFT
}

enum Type {
  ACTION_ITEM
  KEY_DECISION
  AGENDA_ITEM
}

enum Sentiment {
  HAPPY
  GOOD
  OK
  BAD
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}

enum RequestType {
  RESOURCE
  MEETING
}

enum CelebrationType {
  CELEBRATION
  IMPEDIMENT
}

